// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	database "collector/database"

	gocql "github.com/gocql/gocql"

	mock "github.com/stretchr/testify/mock"
)

// IQuery is an autogenerated mock type for the IQuery type
type IQuery struct {
	mock.Mock
}

// Consistency provides a mock function with given fields: c
func (_m *IQuery) Consistency(c gocql.Consistency) database.IQuery {
	ret := _m.Called(c)

	var r0 database.IQuery
	if rf, ok := ret.Get(0).(func(gocql.Consistency) database.IQuery); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.IQuery)
		}
	}

	return r0
}

// Iter provides a mock function with given fields:
func (_m *IQuery) Iter() database.IIter {
	ret := _m.Called()

	var r0 database.IIter
	if rf, ok := ret.Get(0).(func() database.IIter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.IIter)
		}
	}

	return r0
}

// MapScan provides a mock function with given fields: m
func (_m *IQuery) MapScan(m map[string]interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *IQuery) Scan(dest *uint64) error {
	ret := _m.Called(dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint64) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewIQuery creates a new instance of IQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIQuery(t mockConstructorTestingTNewIQuery) *IQuery {
	mock := &IQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
