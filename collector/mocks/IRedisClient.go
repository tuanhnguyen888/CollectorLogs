// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	cache "collector/cache"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IRedisClient is an autogenerated mock type for the IRedisClient type
type IRedisClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *IRedisClient) Get(key string) cache.RedisStringCmd {
	ret := _m.Called(key)

	var r0 cache.RedisStringCmd

	if rf, ok := ret.Get(0).(func(string) cache.RedisStringCmd); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.RedisStringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value, expiration
func (_m *IRedisClient) Set(key string, value interface{}, expiration time.Duration) cache.StatusCmd {
	ret := _m.Called(key, value, expiration)

	var r0 cache.StatusCmd
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) cache.StatusCmd); ok {
		r0 = rf(key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.StatusCmd)
		}
	}

	return r0
}

type mockConstructorTestingTNewIRedisClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRedisClient creates a new instance of IRedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRedisClient(t mockConstructorTestingTNewIRedisClient) *IRedisClient {
	mock := &IRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
