// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "collector/kafka"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Execute provides a mock function with given fields: stt
func (_m *Database) Execute(stt int) ([]byte, error) {
	ret := _m.Called(stt)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(stt)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(stt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(stt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushLogBySchedule provides a mock function with given fields: writer, ctx, stt
func (_m *Database) PushLogBySchedule(writer kafka.IKafkaWriter, ctx context.Context, stt int) {
	_m.Called(writer, ctx, stt)
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
