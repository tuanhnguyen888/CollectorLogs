// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IIter is an autogenerated mock type for the IIter type
type IIter struct {
	mock.Mock
}

// SliceMap provides a mock function with given fields:
func (_m *IIter) SliceMap() ([]map[string]interface{}, error) {
	ret := _m.Called()

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIIter interface {
	mock.TestingT
	Cleanup(func())
}

// NewIIter creates a new instance of IIter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIIter(t mockConstructorTestingTNewIIter) *IIter {
	mock := &IIter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
