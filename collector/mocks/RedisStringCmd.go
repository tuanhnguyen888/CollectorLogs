// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RedisStringCmd is an autogenerated mock type for the RedisStringCmd type
type RedisStringCmd struct {
	mock.Mock
}

// Err provides a mock function with given fields:
func (_m *RedisStringCmd) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Uint64 provides a mock function with given fields:
func (_m *RedisStringCmd) Uint64() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRedisStringCmd interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisStringCmd creates a new instance of RedisStringCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisStringCmd(t mockConstructorTestingTNewRedisStringCmd) *RedisStringCmd {
	mock := &RedisStringCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
